{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///projects/ngx-property-grid/src/lib/dynamic-component-load.directive.ts","webpack:///projects/ngx-property-grid/src/lib/property-grid.component.ts","webpack:///projects/ngx-property-grid/src/lib/property-grid.module.ts","webpack:///projects/ngx-property-grid/src/lib/property-item-meta.ts","webpack:///projects/ngx-property-grid/src/lib/property-value.ts","webpack:///projects/ngx-property-grid/src/public-api.ts","webpack:///src/app/showcase/app.component.html","webpack:///src/app/showcase/app.component.ts","webpack:///src/app/showcase/showcase.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","DynamicComponentLoadDirective","entry","componentFactoryResolver","_controlValueChangeFn","value","propertyValue","changes","options","currentValue","meta","buildComponent","destroyComponent","componentType","componentFactory","resolveComponentFactory","component","createComponent","initComponent","console","error","instance","registerOnChange","valueChange","subscribe","Object","assign","destroy","type","selector","PropertyGridComponent","el","cdr","_templateLoaded","isInternal","state","labelWidth","cardStyle","groupCollapse","showHelp","nativeElement","parentElement","classList","contains","defaultTemplates","forEach","item","templateMap","hasOwnProperty","name","template","detectChanges","templates","link","window","open","undefined","subItems","groups","InternalGroup","i","v","hidden","push","group","find","o","items","sort","a","b","order","filter","length","text","label","_meta","initMeta","_options","__meta__","height","transform","styles","animations","PropertyGridModule","imports","declarations","itemMeta","target","key","valueConvert","parseInt","initState","Number","MAX_VALUE","__proto__","subMeta","create","getPrototypeOf","getOwnPropertyNames","defineProperty","getOwnPropertyDescriptor","enumerable","get","set","PropertyValue","val","AppComponent","student","ExampleStudentOptions","JSON","parse","stringify","templateUrl","SimpleTextEditorComponent","ExampleEditorOptions","font","fontSize","fontColor","jQuery","modernizr","framework","description","colSpan2","birth","age","gender","editor","ShowcaseModule","schemas","entryComponents","providers","bootstrap","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {\n  ComponentFactoryResolver,\n  ComponentRef, Directive,\n  Input, OnChanges, OnDestroy,\n  OnInit, SimpleChanges,\n  Type,\n  ViewContainerRef\n} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\nimport {PropertyItemMeta} from './property-item-meta';\nimport {PropertyValue} from './property-value';\nimport {IDynamicComponent} from './dynamic-component';\n\n@Directive({\n  selector: '[dynamicComponentLoad]',\n})\nexport class DynamicComponentLoadDirective implements OnInit, OnDestroy, OnChanges {\n  private readonly _controlValueChangeFn: (value: any) => void;\n  private component: ComponentRef<IDynamicComponent<any>>;\n  private propertyValue: PropertyValue;\n  private get componentType(): Type<PropertyValueAccess> {\n    return this.meta.type as Type<PropertyValueAccess>;\n  }\n\n  @Input('dynamicComponentLoad') private meta: PropertyItemMeta;\n  @Input()\n  public options: any;\n\n  constructor(private entry: ViewContainerRef, private componentFactoryResolver: ComponentFactoryResolver) {\n    this._controlValueChangeFn = (value: any) => this.propertyValue.value = value;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.options) {\n      this.propertyValue = new PropertyValue(changes.options.currentValue, this.meta);\n    }\n  }\n\n  ngOnInit() {\n    this.buildComponent();\n  }\n\n  ngOnDestroy(): void {\n    this.destroyComponent();\n  }\n\n  private buildComponent(): void {\n    if (!this.componentType) {\n      return;\n    }\n    try {\n      this.destroyComponent();\n      // this.entry.clear();\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory<PropertyValueAccess>(this.componentType);\n      const component = this.entry.createComponent(componentFactory, 0);\n      this.initComponent(component);\n      this.component = component;\n    } catch (e) {\n      console.error('load component error.');\n      console.error(e);\n    }\n  }\n\n  private initComponent(component: ComponentRef<PropertyValueAccess>) {\n    component.instance.value = this.propertyValue.value;\n    if (component.instance.registerOnChange) {\n      component.instance.registerOnChange(this._controlValueChangeFn);\n    }\n    if (component.instance.valueChange) {\n      component.instance.valueChange.subscribe(this._controlValueChangeFn);\n    }\n\n    if (this.meta.options) {\n      Object.assign(component.instance, this.meta.options);\n    }\n  }\n\n  private destroyComponent(): void {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n}\n\ninterface PropertyValueAccess extends ControlValueAccessor, IDynamicComponent<any> {\n}\n\n\n","import {\n  AfterContentInit, AfterViewInit, ChangeDetectorRef,\n  Component,\n  ContentChildren, ElementRef,\n  Input,\n  QueryList,\n  TemplateRef, ViewChildren\n} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {NgxTemplate} from 'ngx-template';\nimport {PropertyItemMeta} from './property-item-meta';\nimport {PropertyValue} from './property-value';\n\n@Component({\n  selector: 'ngx-property-grid',\n  template: `\n    <div class=\"property-grid\" [ngClass]=\"!isInternal && !cardStyle ? 'property-grid-border': null\" [style.width]=\"width\">\n      <div [ngClass]=\"cardStyle ? 'card' : null\">\n        <table class=\"property-grid-table\" [style.width]=\"width\">\n          <tbody>\n          <ng-container *ngFor=\"let group of groups\">\n            <tr *ngIf=\"group.name\">\n              <td colspan=\"2\" class=\"property-grid-group\" (click)=\"groupCollapse && group.toggle()\">{{group.name}}</td>\n            </tr>\n\n            <ng-container *ngFor=\"let item of group.items\">\n              <tr *ngIf=\"group.state\">\n                <td [attr.colspan]=\"item.colSpan2 == true ? 2 : 1\"\n                    class=\"property-grid-label\"\n                    [style.cursor]=\"item.link ? 'pointer' : null\"\n                    (click)=\"openLink(item.link)\">\n                  {{item.name}}\n                  <span *ngIf=\"showHelp && item.showHelp && item.description\" [title]=\"item.description\">[?]</span>\n                </td>\n                <ng-container *ngIf=\"!item.colSpan2\">\n                  <ng-container\n                    *ngTemplateOutlet=\"controlTemplate; context: {$implicit: item}\">\n                  </ng-container>\n                </ng-container>\n              </tr>\n              <tr *ngIf=\"group.state && item.colSpan2\">\n                <ng-container *ngTemplateOutlet=\"controlTemplate; context: {$implicit: item}\"></ng-container>\n              </tr>\n            </ng-container>\n          </ng-container>\n          </tbody>\n        </table>\n      </div>\n\n      <div *ngFor=\"let item of subItems\" class=\"internal-property-grid\" [ngClass]=\"cardStyle ? 'card' : null\">\n        <div (click)=\"pg.toggle()\" class=\"property-grid-header\"\n             [ngClass]=\"cardStyle ? null : 'property-grid-header-margin'\">\n          <b>{{item.name}}</b>\n        </div>\n        <ngx-property-grid\n          [showHelp]=\"showHelp\"\n          [state]=\"item.initState\"\n          [@collapseAnimation]=\"pg.state\"\n          [options]=\"options[item.key]\"\n          [width]=\"width\"\n          [labelWidth]=\"labelWidth\"\n          [templateMap]=\"templateMap\"\n          style=\"display: block;overflow: hidden\"\n          #pg>\n        </ngx-property-grid>\n      </div>\n    </div>\n\n\n    <ng-template #controlTemplate let-item>\n      <td [attr.colspan]=\"item.colSpan2 == true ? 2 : 1\" class=\"property-grid-control\">\n        <div *ngIf=\"templateLoaded && getTemplate(item.type); then thenBlock; else elseBlock\">this is ignored</div>\n        <ng-template #thenBlock>\n          <ng-container *ngTemplateOutlet=\"templateLoaded && getTemplate(item.type); context: {$implicit: propertyValue(item)}\">\n          </ng-container>\n        </ng-template>\n        <ng-template #elseBlock>\n          <ng-container\n            [dynamicComponentLoad]=\"item\"\n            [options]=\"options\">\n          </ng-container>\n        </ng-template>\n      </td>\n    </ng-template>\n\n\n    <ng-container *ngIf=\"!isInternal\">\n\n      <ng-template ngxTemplate=\"checkbox\" let-p>\n        <input type=\"checkbox\" [(ngModel)]=\"p.value\"/>\n      </ng-template>\n\n      <ng-template ngxTemplate=\"color\" let-p>\n        <input type=\"color\" [(ngModel)]=\"p.value\"/>\n      </ng-template>\n\n      <ng-template ngxTemplate=\"date\" let-p>\n        <input type=\"date\" [(ngModel)]=\"p.value\"/>\n      </ng-template>\n\n      <ng-template ngxTemplate=\"label\" let-p>\n        <label>{{p.value}}</label>\n      </ng-template>\n\n      <ng-template ngxTemplate=\"text\" let-p>\n        <input type=\"text\" [(ngModel)]=\"p.value\"/>\n      </ng-template>\n\n      <ng-template ngxTemplate=\"options\" let-p>\n        <select [(ngModel)]=\"p.value\">\n          <option [value]=\"optionValue(option)\" *ngFor=\"let option of p.meta.options\">\n            {{optionLabel(option)}}\n          </option>\n        </select>\n      </ng-template>\n    </ng-container>\n  `,\n  styles: [\n      `\n      .property-grid {\n        /*border: solid 1px #95B8E7;*/\n      }\n\n      .property-grid-border {\n        border: 1px solid #d6d6d678\n      }\n\n      .property-grid-table {\n        border-spacing: 0;\n        padding: 5px\n      }\n\n      .property-grid-group {\n        background-color: white;\n        font-weight: bold;\n        color: #616161;\n        padding-top: 8px;\n        padding-bottom: 5px;\n      }\n\n      .property-grid-label, .property-grid-control {\n        border: dotted 1px #ccc;\n        padding: 2px 5px;\n      }\n\n      .internal-property-grid {\n        margin-top: 12px;\n      }\n\n      .internal-property-grid .property-grid {\n        border-width: 0;\n      }\n\n      .internal-property-grid .property-grid-header {\n        margin-bottom: 5px;\n        background-color: #f5f5f5;\n        padding-bottom: 5px;\n        padding-top: 5px;\n        padding-left: 5px;\n        box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n        -webkit-box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n        width: 100%;\n      }\n\n      .internal-property-grid .property-grid-header-margin {\n        margin-left: 5px;\n        margin-right: 5px;\n        width: unset;\n      }\n\n      .internal-property-grid .property-grid-table {\n        border-width: 0;\n        /*border-top: 1px solid #dbdbdb;*/\n      }\n\n      .card {\n        background-color: #fff;\n        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, .14), 0 1px 18px 0 rgba(0, 0, 0, .12), 0 3px 5px -1px rgba(0, 0, 0, .2);\n        display: flex;\n        flex-flow: row wrap;\n        /*margin: 5px 20px;*/\n        padding: 0;\n      }\n\n      .internal-property-grid ngx-property-grid .card {\n        background-color: unset;\n        box-shadow: unset;\n        display: unset;\n        flex-flow: unset;\n        /*margin: 5px 20px;*/\n        padding: unset;\n      }\n    `\n  ],\n  animations: [\n    trigger('collapseAnimation', [\n      state('hidden', style({\n        height: '0',\n        // overflow: 'hidden',\n      })),\n      state('visible', style({\n        height: '*'\n      })),\n      transition('visible <=> hidden', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\n    ]),\n    trigger('flyInOut', [\n      state('in', style({transform: 'translateX(0)'})),\n      transition('void => *', [\n        style({transform: 'translateX(-100%)'}),\n        animate(100)\n      ]),\n      transition('* => void', [\n        animate(100, style({transform: 'translateX(100%)'}))\n      ])\n    ])\n  ]\n})\nexport class PropertyGridComponent implements AfterContentInit, AfterViewInit {\n  private _options: any;\n  private _meta: any;\n  private _templateLoaded = false;\n  public get templateLoaded(): boolean {\n    return this._templateLoaded;\n  }\n\n  public readonly isInternal: boolean = false;\n\n  @Input()\n  public templateMap: { [key: string]: TemplateRef<any> };\n\n  @Input()\n  public state: 'hidden' | 'visible' = 'visible';\n\n  @Input()\n  width: string | number;\n\n\n  @Input()\n  labelWidth: string | number = '120px';\n\n  @Input()\n  cardStyle = true;\n\n  @Input()\n  groupCollapse = false;\n\n  @Input()\n  showHelp = true;\n\n  @Input()\n  public set meta(v: any) {\n    this._meta = v;\n    this.initMeta();\n  }\n\n  public get meta(): any {\n    return this._meta;\n  }\n\n  @Input()\n  public set options(v: any) {\n    this._options = v;\n    if (v.__meta__) {\n      this.meta = v.__meta__;\n    }\n  }\n\n  public get options(): any {\n    return this._options;\n  }\n\n  @ViewChildren(NgxTemplate) defaultTemplates: QueryList<NgxTemplate>;\n  @ContentChildren(NgxTemplate) templates: QueryList<NgxTemplate>;\n\n  public groups: InternalGroup[];\n  public subItems: PropertyItemMeta[];\n\n  constructor(el: ElementRef<HTMLElement>, private cdr: ChangeDetectorRef) {\n    this.isInternal = el.nativeElement.parentElement && el.nativeElement.parentElement.classList &&\n      el.nativeElement.parentElement.classList.contains('internal-property-grid');\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isInternal) {\n      this._templateLoaded = true;\n    } else {\n      if (this.defaultTemplates) {\n        this.defaultTemplates.forEach((item) => {\n          if (!this.templateMap.hasOwnProperty(item.name)) {\n            this.templateMap[item.name] = item.template;\n          }\n        });\n        this._templateLoaded = true;\n        this.cdr.detectChanges();\n      }\n    }\n  }\n\n  ngAfterContentInit(): void {\n    if (!this.isInternal) {\n      if (!this.templateMap) {\n        this.templateMap = {};\n      }\n      this.templates.forEach((item) => {\n        this.templateMap[item.name] = item.template;\n      });\n    }\n  }\n\n  public openLink(link: string) {\n    if (link) {\n      window.open(link, '_blank');\n    }\n  }\n\n  public getTemplate(type: string | any): TemplateRef<any> {\n    if (typeof type === 'string' && this.templateMap) {\n      return type ? this.templateMap[type] : this.templateMap.default;\n    } else {\n      return undefined;\n    }\n  }\n\n  public propertyValue(meta: PropertyItemMeta): PropertyValue {\n    return new PropertyValue(this.options, meta);\n  }\n\n  public toggle(): void {\n    this.state = this.state === 'visible' ? 'hidden' : 'visible';\n  }\n\n  private initMeta(): void {\n    const meta: object = this.meta;\n    if (!meta) {\n      this.subItems = [];\n      return;\n    }\n\n    const groups: InternalGroup[] = [new InternalGroup(undefined)];\n    const subItems: PropertyItemMeta[] = [];\n    for (const i in meta) {\n      if (!meta.hasOwnProperty(i)) {\n        continue;\n      }\n      const v: PropertyItemMeta = meta[i];\n      if (v.hidden) {\n        continue;\n      }\n      if (v.type === 'subItems') {\n        subItems.push(v);\n        continue;\n      }\n\n      let group = groups.find(o => o.name === v.group);\n      if (!group) {\n        group = new InternalGroup(v.group);\n        groups.push(group);\n      }\n      group.items.push(v);\n    }\n    groups.forEach(o => o.items.sort((a, b) => a.order - b.order));\n\n    this.groups = groups.filter(o => o.items.length > 0);\n    this.subItems = subItems;\n  }\n\n  optionLabel(v: any): string {\n    if (typeof v === 'string') {\n      return v;\n    }\n    if (v.text) {\n      return v.text;\n    }\n    if (v.label) {\n      return v.label;\n    }\n    return v;\n  }\n\n  optionValue(v: any): any {\n    return v && v.value ? v.value : v;\n  }\n}\n\nexport class InternalGroup {\n  public readonly items: PropertyItemMeta[] = [];\n  public type = 'group';\n\n  public state = true;\n\n  public toggle(): void {\n    this.state = !this.state;\n  }\n\n  constructor(public name: string) {\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DynamicComponentLoadDirective} from './dynamic-component-load.directive';\nimport {PropertyGridComponent} from './property-grid.component';\nimport {NgxTemplateModule} from 'ngx-template';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule, FormsModule, NgxTemplateModule\n  ],\n  declarations: [\n    PropertyGridComponent,\n    DynamicComponentLoadDirective\n  ],\n  exports: [\n    PropertyGridComponent\n  ]\n})\nexport class PropertyGridModule {\n}\n","import {Type} from '@angular/core';\nimport {ControlValueAccessor} from '@angular/forms';\nimport {IDynamicComponent} from './dynamic-component';\n\nexport interface PropertyItemMeta {\n    readonly key?: PropertyKey; // auto generate.\n    name: string; // The display name of the property in the grid\n    description?: string; // A description of the property, will be used as tooltip on an hint element (a span with text \"[?]\")\n    order?: number; // The display order.\n    group?: string; //  The group this property belongs to\n    hidden?: boolean; // Whether this property should be hidden in the grid, default is false (can be omitted).\n    initState?: 'hidden' | 'visible'; // - hidden/visible. If hidden then subItems should init by hidden state. default is hidden\n    type?: 'color' | 'date' | 'checkbox' | 'text' | 'options' | string | Type<ControlValueAccessor | IDynamicComponent<any>>;\n    // options: boolean number options label color,\n    // or an custom component should be implement ControlValueAccessor or ICustomDynamicComponent<any>\n    options?: any; // options for type\n    colSpan2?: boolean; //  - true/false. If true then property input will span both columns and will have no name/label\n    // (useful for textArea custom type)\n    valueConvert?: (value: any) => any; // convert the value, eg. parseInt\n    showHelp?: boolean; // default True.\n    link?: string; // help link\n}\n\n\nexport const meta = (itemMeta: PropertyItemMeta) =>\n    (target: any, key: PropertyKey) => {\n\n        // region [adjust]\n        (itemMeta as any).key = key;\n        if (typeof itemMeta.type === 'string') {\n\n        } else {\n\n        }\n        if (!itemMeta.type) {\n            itemMeta.type = 'text';\n        }\n\n        if (itemMeta.type === 'number' && !itemMeta.valueConvert) {\n            itemMeta.valueConvert = parseInt;\n        }\n\n        if (!itemMeta.initState) {\n            itemMeta.initState = 'hidden';\n        }\n        if (!itemMeta.order) {\n            itemMeta.order = Number.MAX_VALUE;\n        }\n        if (itemMeta.showHelp === undefined) {\n            itemMeta.showHelp = true;\n        }\n        // endregion\n\n        let __meta__ = target.__meta__;\n        if (!__meta__) {\n            __meta__ = {};\n            target.__meta__ = __meta__;\n        } else if (target.__proto__.__meta__ === __meta__) {\n            const subMeta = Object.create(Object.getPrototypeOf(__meta__));\n            Object.getOwnPropertyNames(__meta__).forEach(name => {\n                Object.defineProperty(subMeta, name, Object.getOwnPropertyDescriptor(__meta__, name));\n            });\n            __meta__ = subMeta;\n            target.__meta__ = __meta__;\n        }\n\n        Object.defineProperty(__meta__, key, {\n            enumerable: true,\n            get: () => itemMeta,\n            set: (v) => itemMeta = v\n        });\n    };\n","import {PropertyItemMeta} from './property-item-meta';\n\nexport class PropertyValue {\n  public get value(): any {\n    return this.o[this.meta.key];\n  }\n\n  public set value(val: any) {\n    this.o[this.meta.key] = this.meta.valueConvert ? this.meta.valueConvert(val) : val;\n  }\n  constructor(private o: any, public meta: PropertyItemMeta) {\n  }\n}\n","/*\n * Public API Surface of ngx-property-grid\n */\n\nexport * from './lib/property-grid.module';\nexport * from './lib/property-grid.component';\nexport * from './lib/property-item-meta';\nexport * from './lib/property-value';\nexport * from './lib/dynamic-component';\n","<div>\n    <h1 style=\"text-align: center\">Property Grid Example</h1>\n    <div style=\"display: flex; flex-direction: row\">\n\n        <ngx-property-grid [width]=\"'400px'\" [options]=\"student\" [showHelp]=\"true\" [groupCollapse]=\"true\" [cardStyle]=\"student.editor.cardStyle\">\n            <ng-template ngxTemplate=\"text\" let-p>\n                <input type=\"text\" [value]=\"p.value\" (change)=\"p.value = $event.target.value\">\n            </ng-template>\n            <ng-template ngxTemplate=\"fontSize\" let-pp>\n                <input matInput type=\"number\" placeholder=\"Value\" [(ngModel)]=\"pp.value\">\n                <!--<span>字体大小</span>-->\n            </ng-template>\n\n            <ng-template ngxTemplate=\"date\" let-p>\n                <input matInput [matDatepicker]=\"picker\" placeholder=\"Choose a date\" [(ngModel)]=\"p.value\">\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                <mat-datepicker #picker></mat-datepicker>\n            </ng-template>\n\n            <ng-template ngxTemplate=\"sex\" let-p>\n                <mat-radio-group  [(ngModel)]=\"p.value\">\n                    <mat-radio-button value=\"male\">male</mat-radio-button>\n                    <mat-radio-button value=\"female\">female</mat-radio-button>\n                </mat-radio-group>\n            </ng-template>\n        </ngx-property-grid>\n\n        <div style=\"margin-left: 50px; flex: 1\">\n            <div> <h3>The Object：</h3> </div>\n          <ngx-json-view [data]=\"data\" [levelOpen]=\"1\"></ngx-json-view>\n        </div>\n    </div>\n\n</div>\n","import {Component, EventEmitter} from '@angular/core';\nimport {MatCheckbox} from '@angular/material/checkbox';\nimport {MatSlideToggle} from '@angular/material/slide-toggle';\nimport {IDynamicComponent, meta} from 'ngx-property-grid';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html'\n})\nexport class AppComponent {\n    public student: ExampleStudentOptions = new ExampleStudentOptions();\n\n    constructor() {\n    }\n\n    public get data(): string {\n        return JSON.parse(JSON.stringify(this.student));\n    }\n\n    text: string;\n}\n\n@Component({\n    selector: 'app-text-editor',\n    template: `<input type=\"text\" [value]=\"value\" (change)=\"valueChange.emit($event.target.value)\"/>`\n})\nexport class SimpleTextEditorComponent implements IDynamicComponent<string> {\n    value: string;\n    valueChange: EventEmitter<string> = new EventEmitter<string>();\n}\n\nexport class ExampleEditorOptions {\n    @meta({\n        name: 'Font', description: 'The font editor to use', colSpan2: false,\n        type: SimpleTextEditorComponent, group: 'Editor', hidden: false\n    })\n    font = 'Source Code Pro';\n\n    @meta({name: 'Font size', group: 'Editor', valueConvert: parseInt, type: 'fontSize'})\n    fontSize = 14;\n\n    @meta({name: 'Font color', group: 'Editor', type: 'color'})\n    fontColor = '#51f41c';\n\n    @meta({name: 'jQuery', group: 'Plugins', type: MatCheckbox})\n    jQuery = true;\n\n    @meta({name: 'Card Style', group: 'Style', type: MatCheckbox})\n    cardStyle = true;\n\n    @meta({\n        name: 'modernizr',\n        description: 'Whether or not to include modernizr on the page',\n        group: 'Plugins',\n        type: MatSlideToggle\n    })\n    modernizr = false;\n\n    @meta({\n        name: 'Framework',\n        description: 'Whether to include any additional framework',\n        type: 'options',\n        options: ['None', {text: 'AngularJS', value: 'angular'}, {text: 'Backbone.js', value: 'backbone'}]\n    })\n    framework = 'None';\n\n}\n\nexport class ExampleStudentOptions {\n\n    @meta({name: 'Birth', group: 'Basic Information', type: 'date', order: 4})\n    birth = '2018-05-08';\n\n    @meta({name: 'Name', group: 'Basic Information', type: 'text', order: 1, link: 'http://www.baidu.com'})\n    name = 'Lily';\n\n    @meta({name: 'Age', group: 'Basic Information1', valueConvert: parseInt, type: 'text', order: 2})\n    age = 19;\n\n    @meta({name: 'Telephone', type: 'telephone', group: 'Basic Information1', hidden: true})\n    telephone;\n\n    @meta({name: 'Gender', group: 'Basic Information', type: 'sex', order: 3})\n    gender = 'male';\n\n    @meta({name: 'Editor Preference', type: 'subItems', initState: 'visible'})\n    editor: ExampleEditorOptions = new ExampleEditorOptions();\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\n\nimport {AppComponent, SimpleTextEditorComponent} from './app.component';\nimport {BrowserAnimationsModule, NoopAnimationsModule} from '@angular/platform-browser/animations';\n\nimport {FormsModule} from '@angular/forms';\nimport {NgxTemplateModule} from 'ngx-template';\nimport {MatCheckbox, MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatSlider, MatSliderModule} from '@angular/material/slider';\nimport {MatDatepicker, MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatSlideToggle, MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatNativeDateModule} from '@angular/material/core';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatInputModule} from '@angular/material/input';\nimport {NgxJsonViewModule} from 'ng-json-view';\nimport {PropertyGridModule} from 'ngx-property-grid';\n\n@NgModule({\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n    imports: [\n        BrowserModule, FormsModule, NoopAnimationsModule, PropertyGridModule, NgxTemplateModule,\n        NgxJsonViewModule, BrowserAnimationsModule,\n        MatCheckboxModule, MatSliderModule, MatDatepickerModule, MatSlideToggleModule,\n        MatNativeDateModule, MatRadioModule, MatInputModule\n    ],\n    entryComponents: [SimpleTextEditorComponent, MatCheckbox, MatSlider, MatDatepicker, MatSlideToggle],\n    declarations: [\n        AppComponent, SimpleTextEditorComponent\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class ShowcaseModule {\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { environment } from './environments/environment';\nimport {ShowcaseModule} from './app/showcase/showcase.module';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(ShowcaseModule)\n  .catch(err => console.error(err));\n"]}