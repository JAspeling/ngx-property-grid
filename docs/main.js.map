{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/property-grid/dynamic-component.ts","webpack:///./src/app/components/property-grid/index.ts","webpack:///./src/app/components/property-grid/property-grid-item-meta.ts","webpack:///./src/app/components/property-grid/property-grid.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<ngx-property-grid [width]=\\\"'350px'\\\" [options]=\\\"editor\\\"></ngx-property-grid>\\n\\n\\n<code>\\n    {{data}}\\n</code>\\n\\n\\n\"","module.exports = \"\"","import {Component, EventEmitter} from '@angular/core';\nimport {meta, IDynamicComponent} from './components/property-grid';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    public editor: ExampleEditorOptions = new ExampleEditorOptions();\n\n    constructor() {\n    }\n\n    public get data(): string {\n        return JSON.stringify(this.editor);\n    }\n\n    text: string;\n}\n\n@Component({\n    selector: 'app-text-editor',\n    template: `<input type=\"text\" [value]=\"value\" (change)=\"valueChange.emit($event.target.value)\"/>`\n})\nexport class SimpleTextEditorComponent implements IDynamicComponent<string> {\n    value: string;\n    valueChange: EventEmitter<string> = new EventEmitter<string>();\n}\n\n\nexport class ExampleEditorOptions {\n    @meta({name: 'Font', description: 'The font editor to use', componentType: SimpleTextEditorComponent, group: 'Editor', hidden: false})\n    font = 'Source Code Pro';\n\n    @meta({name: 'Font size', group: 'Editor', type: 'number', valueConvert: parseInt})\n    fontSize = 14;\n\n    @meta({name: 'Font color', group: 'Editor', type: 'color'})\n    fontColor = '#51f41c';\n\n    @meta({name: 'jQuery', group: 'Plugins', type: 'checkbox'})\n    jQuery = true;\n\n    @meta({name: 'modernizr', description: 'Whether or not to include modernizr on the page', group: 'Plugins', type: 'checkbox'})\n    modernizr = false;\n\n    @meta({\n        name: 'Framework',\n        description: 'Whether to include any additional framework',\n        type: 'options',\n        options: ['None', {text: 'AngularJS', value: 'angular'}, {text: 'Backbone.js', value: 'backbone'}]\n    })\n    framework = 'None';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent, SimpleTextEditorComponent} from './app.component';\nimport {PropertyGridModule} from './components/property-grid';\n\n@NgModule({\n    imports: [\n        BrowserModule, PropertyGridModule\n    ],\n    entryComponents: [SimpleTextEditorComponent],\n    declarations: [\n        AppComponent, SimpleTextEditorComponent\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    Type,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'dynamic-component',\n    template: '<ng-container #container></ng-container>',\n})\nexport class DynamicComponent implements OnInit, IDynamicComponent<any> {\n    private _value: any;\n\n    @ViewChild('container', { read: ViewContainerRef }) entry;\n    private component: ComponentRef<IDynamicComponent<any>>;\n\n    @Input() componentType: Type<any>;\n\n    @Input()\n    set value(v: any) {\n        this._value = v;\n        if (this.component) {\n            this.component.instance.value =  v;\n        }\n    }\n    get value(): any {\n        return this._value;\n    }\n\n    @Output()\n    readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        this.buildComponent();\n    }\n\n    private onValueChange(e: any): void {\n        this._value = e;\n        this.valueChange.emit(e);\n    }\n\n    private buildComponent(): void {\n        if (!this.componentType) {\n            return;\n        }\n        try {\n            this.destroyComponent();\n            // this.entry.clear();\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory<IDynamicComponent<any>>(this.componentType);\n            const component = this.entry.createComponent(componentFactory, 0);\n            this.initComponent(component);\n            this.component = component;\n        } catch (e) {\n            console.error('load component error.');\n            console.error(e);\n        }\n    }\n\n    private initComponent(component: ComponentRef<IDynamicComponent<any>>) {\n        component.instance.value = this._value;\n        if (component.instance.valueChange) {\n            component.instance.valueChange.subscribe((e: any) => this.onValueChange(e));\n        } else {\n            component.instance.valueChange = new EventEmitter<any>();\n            component.instance.valueChange.subscribe((e: any) => this.onValueChange(e));\n        }\n    }\n\n    private destroyComponent(): void {\n        if (this.component) {\n            this.component.destroy();\n        }\n    }\n}\n\nexport interface IDynamicComponent<TValue> {\n    value: TValue;\n    valueChange: EventEmitter<TValue>;\n}\n","\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DynamicComponent, IDynamicComponent} from './dynamic-component';\nimport {PropertyGridComponent} from './property-grid.component';\n\nexport {IDynamicComponent} from './dynamic-component';\nexport {PropertyGridComponent} from './property-grid.component';\n\nexport {meta, PropertyGridItemMeta} from './property-grid-item-meta';\n\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        PropertyGridComponent,\n        DynamicComponent\n    ],\n    exports: [\n        PropertyGridComponent,\n    ]\n})\nexport class PropertyGridModule {\n}\n","import {Type} from '@angular/core';\n\nexport interface PropertyGridItemMeta {\n    name: string;\n    description?: string;\n    order?: string;\n    group?: string;\n    hidden?: boolean; // default false\n    componentType?: Type<any>;\n    singleRow?: boolean; // default true\n    options?: any;\n    type?: string; // boolean number options label color\n    valueConvert?: (value: any) => any;\n}\n\nexport const meta = (m: PropertyGridItemMeta) =>\n    (target: any, key: string | symbol) => {\n        if (!target.__meta) {\n            target.__meta = {};\n        }\n        target.__meta[key] = m;\n    };\n","import {Component, Input, OnInit} from '@angular/core';\nimport {PropertyGridItemMeta} from '.';\n\n@Component({\n    selector: 'ngx-property-grid',\n    template: `\n        <div class=\"property-grid\">\n            <table class=\"property-grid-table\" [ngStyle]=\"{width: width}\">\n                <tbody>\n                <tr [ngSwitch]=\"row.type\" *ngFor=\"let row of rows\"\n                    [ngClass]=\"row.type == 'group'? 'property-grid-group-row':'property-grid-row'\">\n                    <!--<td [attr.colspan]=\"row.colspan\"></td>-->\n                    <td *ngSwitchCase=\"'group'\" colspan=\"2\" class=\"property-grid-group\">{{row.name}}</td>\n                    <td *ngSwitchDefault colspan=\"1\" class=\"property-grid-label\">{{row.name}}\n                        <span *ngIf=\"row.description\" [title]=\"row.description\">[?]</span>\n                    </td>\n                    <td [ngSwitch]=\"row.type\" *ngSwitchDefault colspan=\"1\" class=\"property-grid-control\">\n\n                        <input *ngSwitchCase=\"'checkbox'\" type=\"checkbox\" [checked]=\"options[row.key]\"\n                               (change)=\"convertValue(row, $event.target.checked)\"/>\n\n                        <input *ngSwitchCase=\"'color'\" type=\"color\" [value]=\"options[row.key]\"\n                               (change)=\"convertValue(row, $event.target.value)\"/>\n\n                        <input *ngSwitchCase=\"'number'\" type=\"text\" [value]=\"options[row.key]\"\n                               (change)=\"convertValue(row, $event.target.value)\"/>\n\n                        <input *ngSwitchCase=\"'text'\" type=\"text\" [value]=\"options[row.key]\"\n                               (change)=\"convertValue(row, $event.target.value)\"/>\n\n                        <select *ngSwitchCase=\"'options'\" (change)=\"convertValue(row, $event.target.value)\">\n                            <option [value]=\"optionValue(option)\" *ngFor=\"let option of row.options\">{{optionLabel(option)}}</option>\n                        </select>\n\n                        <label *ngSwitchCase=\"'label'\">{{options[row.key]}}</label>\n\n\n                        <dynamic-component *ngSwitchDefault\n                                           [componentType]=\"row.componentType\"\n                                           [value]=\"options[row.key]\"\n                                           (valueChange)=\"convertValue(row, $event)\">\n\n                        </dynamic-component>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    `,\n    styles: [\n            `\n            .property-grid-table {\n                border: solid 1px #95B8E7;\n                border-spacing: 0;\n            }\n\n            .property-grid-group {\n                background-color: #368bffeb;\n                font-weight: bold;\n                color: white;\n            }\n\n            .property-grid-label, .property-grid-control {\n                border: dotted 1px #ccc;\n                padding: 2px 5px;\n            }\n        `\n    ]\n})\nexport class PropertyGridComponent implements OnInit {\n    private _options: any;\n    private _meta: any;\n\n    @Input()\n    width: string | number;\n\n    @Input()\n    public set meta(v: any) {\n        this._meta = v;\n        this.initMeta();\n    }\n\n    public get meta(): any {\n        return this._meta;\n    }\n\n    @Input()\n    public set options(v: any) {\n        if (v.__meta) {\n            this.meta = v.__meta;\n        }\n        this._options = v;\n    }\n\n    public get options(): any {\n        return this._options;\n    }\n\n    public rows: Array<InternalGroup | InternalPropertyGridItemMeta | any>;\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    change(e: any) {\n        console.log(e);\n    }\n\n    public convertValue(meta: InternalPropertyGridItemMeta, val: any): void {\n        this.options[meta.key] = meta.valueConvert ? meta.valueConvert(val) : val;\n    }\n\n    optionLabel(v: any): string {\n        if (typeof v === 'string') {\n            return v;\n        }\n        if (v.text) {\n            return v.text;\n        }\n        if (v.label) {\n            return v.label;\n        }\n        return v;\n    }\n\n    optionValue(v: any): any {\n        return v && v.value ? v.value : v;\n    }\n\n    private initMeta(): void {\n        const meta: object = this.meta;\n        this.rows = [];\n        if (!meta) {\n            return;\n        }\n\n        const groups: InternalGroup[] = [new InternalGroup(undefined)];\n        for (const i in meta) {\n            if (!meta.hasOwnProperty(i)) {\n                continue;\n            }\n            const v: InternalPropertyGridItemMeta = meta[i];\n            if (v.hidden) {\n                continue;\n            }\n            v.key = i;\n            if (!v.type && !v.componentType) {\n                v.type = 'text';\n            }\n\n            let group = groups.find(o => o.name === v.group);\n            if (!group) {\n                group = new InternalGroup(v.group);\n                groups.push(group);\n            }\n            group.items.push(v);\n        }\n        const rows: Array<InternalGroup | InternalPropertyGridItemMeta> = [];\n        for (const g of groups) {\n            if (g.name) {\n                rows.push(g);\n            }\n            g.items.forEach(o => rows.push(o));\n        }\n        this.rows = rows;\n    }\n}\n\n\nexport class InternalGroup {\n    public readonly items: InternalPropertyGridItemMeta[] = [];\n    public type = 'group';\n\n    constructor(public name: string) {\n    }\n}\n\nexport interface InternalPropertyGridItemMeta extends PropertyGridItemMeta {\n    key: string;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n"],"sourceRoot":""}