{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/property-grid/dynamic-component.ts","webpack:///./src/app/components/property-grid/index.ts","webpack:///./src/app/components/property-grid/property-grid-item-meta.ts","webpack:///./src/app/components/property-grid/property-grid.component.html","webpack:///./src/app/components/property-grid/property-grid.component.scss","webpack:///./src/app/components/property-grid/property-grid.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<ngx-property-grid [width]=\\\"'300px'\\\" [options]=\\\"editor\\\"></ngx-property-grid>\\n\\n\\n<code>\\n    {{data}}\\n</code>\\n\\n\\n\\n\"","module.exports = \"\"","import {Component} from '@angular/core';\nimport {$meta} from './components/property-grid/property-grid-item-meta';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    public editor: ExmapleEditorOptions = new ExmapleEditorOptions();\n\n    constructor() {\n    }\n\n    public get data(): string {\n        return JSON.stringify(this.editor);\n    }\n}\n\n\nexport class ExmapleEditorOptions {\n    @$meta({name: 'Font', description: 'The font editor to use', group: 'Editor', hidden: false})\n    font = 'Source Code Pro';\n\n    @$meta({name: 'Font size', group: 'Editor', type: 'number', valueConvert: parseInt})\n    fontSize = 14;\n\n    @$meta({name: 'Font color', group: 'Editor', type: 'color'})\n    fontColor = '#51f41c';\n\n    @$meta({name: 'jQuery', group: 'Plugins', type: 'checkbox'})\n    jQuery = true;\n\n    @$meta({name: 'modernizr', description: 'Whether or not to include modernizr on the page', group: 'Plugins', type: 'checkbox'})\n    modernizr = false;\n\n    @$meta({\n        name: 'Framework',\n        description: 'Whether to include any additional framework',\n        type: 'options',\n        options: ['None', {text: 'AngularJS', value: 'angular'}, {text: 'Backbone.js', value: 'backbone'}]\n    })\n    framework = 'None';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {PropertyGridModule} from './components/property-grid';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n    ],\n    imports: [\n        BrowserModule, PropertyGridModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","/**\n * Created by YISH on 2018/01/12.\n */\n\nimport {\n    Component,\n    ComponentFactoryResolver, DoCheck, Input, OnChanges,\n    OnInit, SimpleChanges, Type, ViewContainerRef\n} from '@angular/core';\nimport {ComponentRef} from '@angular/core/src/linker/component_factory';\n\n@Component({\n    selector: 'dynamic-component',\n    template: ``,\n})\nexport class DynamicComponent implements OnInit, DoCheck, OnChanges {\n    private component: ComponentRef<IDynamicComponent>;\n\n    @Input() componentType: Type<any>;\n\n    constructor(private componentFactoryResolver: ComponentFactoryResolver, private entry: ViewContainerRef) {\n    }\n\n    ngOnInit() {\n        this.buildComponent();\n    }\n\n    ngDoCheck(): void {\n        if (this.component) {\n            if (this.component.componentType !== this.componentType) {\n                this.buildComponent();\n            }\n            // if (!_.isEqual(this.component.instance.options, this.componentOptions)) {\n            //     this.options.componentOptions = this.componentOptions = this.component.instance.options;\n            // }\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // if (changes.options && changes.options.currentValue) {\n        //     if (changes.options.currentValue.componentOptions !== this.componentOptions) {\n        //         this.componentOptions = changes.options.currentValue.componentOptions;\n        //         if (this.component) {\n        //             this.component.instance.options = this.componentOptions;\n        //         }\n        //     }\n        // }\n    }\n\n    private buildComponent(): void {\n        if (!this.componentType) {\n            return;\n        }\n        try {\n            if (this.component) {\n                this.component.destroy();\n            }\n            // this.entry.clear();\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory<IDynamicComponent>(this.componentType);\n            const component = this.entry.createComponent(componentFactory);\n            // component.instance.options = this.componentOptions;\n            this.component = component;\n        } catch (e) {\n            console.error('load component error.');\n            console.error(e);\n        }\n    }\n}\n\nexport interface IDynamicComponent {\n    options: any;\n}\n","import {PropertyGridComponent} from './property-grid.component';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DynamicComponent} from './dynamic-component';\n\nexport {PropertyGridItemMeta, $meta} from './property-grid-item-meta';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        PropertyGridComponent,\n        DynamicComponent,\n    ],\n    exports: [\n        PropertyGridComponent,\n    ]\n})\nexport class PropertyGridModule {\n}\n","import {Type} from '@angular/core';\n\nexport interface PropertyGridItemMeta {\n    name: string;\n    description?: string;\n    order?: string;\n    group?: string;\n    hidden?: boolean; // default false\n    componentType?: Type<any>;\n    singleRow?: boolean; // default true\n    options?: any;\n    type?: string; // boolean number options label color\n    valueConvert?: (value: any) => any;\n}\n\nexport const $meta = (meta: PropertyGridItemMeta) =>\n    (target: any, key: string | symbol) => {\n    if (!target.__meta) {\n        target.__meta = {};\n    }\n    target.__meta[key] = meta;\n};\n\n\n","module.exports = \"<div class=\\\"property-grid\\\">\\n    <table class=\\\"property-grid-table\\\" [ngStyle]=\\\"{width: width}\\\">\\n        <tbody>\\n        <tr [ngSwitch]=\\\"row.type\\\" *ngFor=\\\"let row of rows\\\" [ngClass]=\\\"row.type == 'group'? 'property-grid-group-row':'property-grid-row'\\\">\\n            <!--<td [attr.colspan]=\\\"row.colspan\\\"></td>-->\\n            <td *ngSwitchCase=\\\"'group'\\\" colspan=\\\"2\\\" class=\\\"property-grid-group\\\">{{row.name}}</td>\\n            <td *ngSwitchDefault colspan=\\\"1\\\" class=\\\"property-grid-label\\\">{{row.name}}<span *ngIf=\\\"row.description\\\" [title]=\\\"row.description\\\">[?]</span></td>\\n            <td [ngSwitch]=\\\"row.type\\\" *ngSwitchDefault colspan=\\\"1\\\" class=\\\"property-grid-control\\\">\\n\\n                <input *ngSwitchCase=\\\"'checkbox'\\\" type=\\\"checkbox\\\" [checked]=\\\"options[row.key]\\\" (change)=\\\"convertValue(row, $event.target.checked)\\\"/>\\n\\n                <input *ngSwitchCase=\\\"'color'\\\" type=\\\"color\\\" [value]=\\\"options[row.key]\\\" (change)=\\\"convertValue(row, $event.target.value)\\\" />\\n\\n                <input *ngSwitchCase=\\\"'number'\\\" type=\\\"text\\\" [value]=\\\"options[row.key]\\\" (change)=\\\"convertValue(row, $event.target.value)\\\" />\\n\\n                <input *ngSwitchCase=\\\"'text'\\\" type=\\\"text\\\" [value]=\\\"options[row.key]\\\" (change)=\\\"convertValue(row, $event.target.value)\\\" />\\n\\n                <select *ngSwitchCase=\\\"'options'\\\" (change)=\\\"convertValue(row, $event.target.value)\\\">\\n                    <option  [value]=\\\"optionValue(option)\\\" *ngFor=\\\"let option of row.options\\\">{{optionLabel(option)}}</option>\\n                </select>\\n\\n                <label *ngSwitchCase=\\\"'label'\\\" >{{options[row.key]}}</label>\\n\\n\\n                <dynamic-component *ngSwitchDefault [componentType]=\\\"row.meta.componentType\\\" ></dynamic-component>\\n            </td>\\n        </tr>\\n        </tbody>\\n    </table>\\n</div>\\n\"","module.exports = \".property-grid .property-grid-table {\\n  border: solid 1px #95B8E7;\\n  border-spacing: 0; }\\n\\n.property-grid .property-grid-group-row {\\n  background-color: #368bffeb;\\n  font-weight: bold;\\n  color: white; }\\n\\n.property-grid .property-grid-label, .property-grid .property-grid-control {\\n  border: dotted 1px #ccc;\\n  padding: 2px 5px; }\\n\"","import {Component, Input, OnInit} from '@angular/core';\nimport {PropertyGridItemMeta} from './property-grid-item-meta';\n\n@Component({\n    selector: 'ngx-property-grid',\n    templateUrl: './property-grid.component.html',\n    styleUrls: ['./property-grid.component.scss']\n})\nexport class PropertyGridComponent implements OnInit {\n    private _options: any;\n    private _meta: any;\n\n    @Input()\n    width: string| number;\n\n    @Input()\n    public set meta(v: any) {\n        this._meta = v;\n        this.initMeta();\n    }\n    public get meta(): any {\n        return this._meta;\n    }\n\n    @Input()\n    public set options(v: any) {\n        if (v.__meta) {\n            this.meta = v.__meta;\n        }\n        this._options = v;\n    }\n    public get options(): any {\n        return this._options;\n    }\n\n    public rows: Array<InternalGroup | InternalPropertyGridItemMeta | any>;\n\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    change(e: any) {\n        console.log(e);\n    }\n\n    public convertValue(meta: InternalPropertyGridItemMeta, val: any): void {\n        this.options[meta.key] = meta.valueConvert ? meta.valueConvert(val) : val;\n    }\n\n    optionLabel(v: any): string {\n        if (typeof v === 'string') {\n            return v;\n        }\n        if (v.text) {\n            return v.text;\n        }\n        if (v.label) {\n            return v.label;\n        }\n        return v;\n    }\n\n    optionValue(v: any): any {\n        return v && v.value ? v.value : v;\n    }\n\n    private initMeta(): void {\n        const meta: object = this.meta;\n        this.rows = [];\n        if (!meta) {\n            return;\n        }\n\n        const groups: InternalGroup[] = [new InternalGroup(undefined)];\n        for (const i in meta) {\n            if (!meta.hasOwnProperty(i)) {\n                continue;\n            }\n            const v: InternalPropertyGridItemMeta = meta[i];\n            if (v.hidden) {\n                continue;\n            }\n            v.key = i;\n            if (!v.type && !v.componentType) {\n                v.type = 'text';\n            }\n\n            let group = groups.find(o => o.name === v.group);\n            if (!group) {\n                group = new InternalGroup(v.group);\n                groups.push(group);\n            }\n            group.items.push(v);\n        }\n        const rows: Array<InternalGroup | InternalPropertyGridItemMeta> = [];\n        for (const g of groups) {\n            if (g.name) {\n                rows.push(g);\n            }\n            g.items.forEach(o => rows.push(o));\n        }\n        this.rows = rows;\n    }\n}\n\n\nexport class InternalGroup {\n    public readonly items: InternalPropertyGridItemMeta[] = [];\n    public type = 'group';\n\n    constructor(public name: string) {\n    }\n}\n\nexport interface InternalPropertyGridItemMeta extends PropertyGridItemMeta {\n    key: string;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n"],"sourceRoot":""}